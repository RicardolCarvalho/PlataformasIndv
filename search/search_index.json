{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#template-de-entrega","title":"Template de Entrega","text":"Edi\u00e7\u00e3o <p>2025.5</p>"},{"location":"#alunos","title":"Alunos","text":"<ol> <li>Ricardo Luz Carvalho</li> <li>Jo\u00e3o Gabriel Faus Faraco</li> <li>Vitor Trufino Raia</li> </ol>"},{"location":"#entregas-individuais-ricardo-luz-carvalho","title":"Entregas Individuais - Ricardo Luz Carvalho","text":"<ul> <li> Roteiro 1 - Data 24/09/2025</li> <li> Roteiro 2 - Data 07/10/2025</li> <li> Roteiro 3 - Data 15/10/2025</li> <li> Roteiro 4 - Data 17/10/2025</li> <li> Roteiro 5 - Data 24/10/2025</li> </ul>"},{"location":"#entregas-em-grupo","title":"Entregas em Grupo","text":"<ul> <li> Projeto</li> </ul>"},{"location":"#diagrama","title":"Diagrama","text":"<pre><code>flowchart LR\n    subgraph api [Subnet API]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth:::red\n        gateway --&gt; product\n        gateway --&gt; order\n        gateway --&gt; exchange\n        auth --&gt; account\n        order --&gt; product\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        product --&gt; db\n        order --&gt; db\n    end\n    exchange e3@==&gt; 3partyapi:::green@{label: \"3rd-party API\"}\n    internet e2@==&gt; |request| gateway:::orange\n    e2@{ animate: true }\n    e3@{ animate: true }\n    classDef green fill:#cfc\n    classDef orange fill:#FCBE3E</code></pre>"},{"location":"#codigos","title":"C\u00f3digos","text":"De um arquivo remotoAnota\u00e7\u00f5es no c\u00f3digo main.yaml<pre><code>name: ci\non:\n  - push\n  - pull_request\n\n# Environment\nenv:\n  CI: true\n  PYTHON_VERSION: 3.12\n\n# Jobs to run\njobs:\n\n  # Build and deploy documentation site\n  deploy:\n    if: github.event_name != 'pull_request' &amp;&amp; github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n\n      # Checkout source form GitHub\n      - uses: actions/checkout@v4\n\n      # Install Python runtime and dependencies\n      - uses: actions/setup-python@v4\n        with:\n          python-version: ${{ env.PYTHON_VERSION }}\n\n      # pip\n      - run: |\n          pip install -r requirements.txt\n\n      # deploy\n      - run: |\n          mkdocs gh-deploy --force\n</code></pre> compose.yaml<pre><code>name: app\n\n    db:\n        image: postgres:17\n        environment:\n            POSTGRES_DB: ${POSTGRES_DB:-projeto} # (1)!\n            POSTGRES_USER: ${POSTGRES_USER:-projeto}\n            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-projeto}\n        ports:\n            - 5432:5432 #(2)!\n</code></pre> <ol> <li> <p>Caso a vari\u00e1vel de ambiente <code>POSTGRES_DB</code> n\u00e3o exista ou seja nula - n\u00e3o seja definida no arquivo <code>.env</code> - o valor padr\u00e3o ser\u00e1 <code>projeto</code>. Vide documenta\u00e7\u00e3o.</p> </li> <li> <p>Aqui \u00e9 feito um t\u00fanel da porta 5432 do container do banco de dados para a porta 5432 do host (no caso localhost). Em um ambiente de produ\u00e7\u00e3o, essa porta n\u00e3o deve ser exposta, pois ningu\u00e9m de fora do compose deveria acessar o banco de dados diretamente.</p> </li> </ol>"},{"location":"#exemplo-de-video","title":"Exemplo de v\u00eddeo","text":"<p>Lorem ipsum dolor sit amet</p>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<p>Material for MkDocs</p>"},{"location":"exercicio1/main/","title":"Exerc\u00edcio 1 - Product","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway e5@==&gt; product:::red\n        gateway e6@==&gt; order\n        product e2@==&gt; db\n        order e3@==&gt; db\n        order e4@==&gt; product\n    end\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    classDef red fill:#fcc\n    click product \"#product-api\" \"Product API\"</code></pre>"},{"location":"exercicio1/main/#repositorios","title":"Reposit\u00f3rios","text":""},{"location":"exercicio1/main/#1-product-repository","title":"1. Product Repository","text":"<p>Link: https://github.com/RicardolCarvalho/product</p> <p>Estrutura do projeto: </p><pre><code>product/\n\u251c\u2500\u2500 src/main/java/store/product/\n\u2502   \u251c\u2500\u2500 ProductController.java\n\u2502   \u251c\u2500\u2500 ProductIn.java\n\u2502   \u2514\u2500\u2500 ProductOut.java\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 .gitignore\n</code></pre><p></p>"},{"location":"exercicio1/main/#2-product-service-repository","title":"2. Product Service Repository","text":"<p>Link: https://github.com/RicardolCarvalho/product-service</p> <p>Descri\u00e7\u00e3o: Reposit\u00f3rio contendo a implementa\u00e7\u00e3o completa do microservi\u00e7o de produtos com Spring Boot.</p> <p>Estrutura do projeto: </p><pre><code>product-service/\n\u251c\u2500\u2500 src/main/\n\u2502   \u251c\u2500\u2500 Product.java\n\u2502   \u251c\u2500\u2500 ProductApplication.java\n\u2502   \u251c\u2500\u2500 ProductModel.java\n\u2502   \u251c\u2500\u2500 ProductParser.java\n\u2502   \u251c\u2500\u2500 ProductRepository.java\n\u2502   \u251c\u2500\u2500 ProductResource.java\n\u2502   \u2514\u2500\u2500 ProductService.java\n\u251c\u2500\u2500 DockerFile\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 .gitignore\n</code></pre><p></p>"},{"location":"exercicio1/main/#codigo-fonte-das-atividades","title":"C\u00f3digo Fonte das Atividades","text":""},{"location":"exercicio1/main/#principais-componentes-implementados","title":"Principais Componentes Implementados","text":""},{"location":"exercicio1/main/#1-productcontrollerjava","title":"1. ProductController.java","text":"<p>Controlador REST respons\u00e1vel por expor os endpoints da API de produtos:</p> <pre><code>@RestController\n@RequestMapping(\"/product\")\npublic class ProductController {\n\n    @Autowired\n    private ProductService productService;\n\n    @PostMapping\n    public ResponseEntity&lt;ProductOut&gt; createProduct(@RequestBody ProductIn productIn) {\n    }\n\n    @GetMapping\n    public ResponseEntity&lt;List&lt;ProductOut&gt;&gt; getAllProducts() {\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;ProductOut&gt; getProductById(@PathVariable String id) {\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity&lt;Void&gt; deleteProduct(@PathVariable String id) {\n    }\n}\n</code></pre>"},{"location":"exercicio1/main/#2-productjava-entidade","title":"2. Product.java (Entidade)","text":"<p>Entidade JPA representando um produto no banco de dados:</p> <pre><code>@Entity\n@Table(name = \"products\")\npublic class Product {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @Column(nullable = false)\n    private String name;\n\n    @Column(nullable = false)\n    private Double price;\n\n    @Column(nullable = false)\n    private String unit;\n}\n</code></pre>"},{"location":"exercicio1/main/#3-productservicejava","title":"3. ProductService.java","text":"<p>Camada de servi\u00e7o contendo a l\u00f3gica de neg\u00f3cio:</p> <pre><code>@Service\npublic class ProductService {\n\n    @Autowired\n    private ProductRepository productRepository;\n\n    public ProductOut createProduct(ProductIn productIn) {\n        Product product = ProductParser.toEntity(productIn);\n        Product savedProduct = productRepository.save(product);\n        return ProductParser.toOut(savedProduct);\n    }\n\n    public List&lt;ProductOut&gt; getAllProducts() {\n        List&lt;Product&gt; products = productRepository.findAll();\n        return products.stream()\n                .map(ProductParser::toOut)\n                .collect(Collectors.toList());\n    }\n\n}\n</code></pre>"},{"location":"exercicio1/main/#product-api","title":"Product API","text":"<p>The API should have the following endpoints:</p> <p>POST /product</p> <p>Create a new product.</p> RequestResponsePostman <pre><code>{\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <p></p><pre><code>{\n    \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <pre><code>Response code: 201 (created)\n</code></pre><p></p> <p></p> <p>GET /product</p> <p>Get all products.</p> ResponsePostman <p></p><pre><code>[\n    {\n        \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n        \"name\": \"Tomato\",\n        \"price\": 10.12,\n        \"unit\": \"kg\"\n    },\n    {\n        \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n        \"name\": \"Cheese\",\n        \"price\": 0.62,\n        \"unit\": \"slice\"\n    }\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre><p></p> <p></p> <p>GET /product/{id}</p> <p>Get a product by its ID.</p> ResponsePostman <p></p><pre><code>{\n    \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n    \"name\": \"Tomato\",\n    \"price\": 10.12,\n    \"unit\": \"kg\"\n}\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre><p></p> <p></p> <p>DELETE /product/{id}</p> <p>Delete a product by its ID.</p> <pre><code>Response code: 204 (no content)\n</code></pre> <p>This MkDocs was created by Ricardo Luz Carvalho</p>"},{"location":"exercicio2/main/","title":"Exerc\u00edcio 2 - Order","text":""},{"location":"exercicio2/main/#exercicio-2-order-api","title":"Exerc\u00edcio 2 - Order API","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway e5@==&gt; product\n        gateway e6@==&gt; order:::red\n        product e2@==&gt; db\n        order e3@==&gt; db\n        order e4@==&gt; product\n    end\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e5@{ animate: true }\n    e6@{ animate: true }\n    classDef red fill:#fcc\n    click order \"#order-api\" \"Order API\"</code></pre>"},{"location":"exercicio2/main/#repositorios","title":"Reposit\u00f3rios","text":""},{"location":"exercicio2/main/#1-order-repository","title":"1. Order Repository","text":"<p>Link: https://github.com/RicardolCarvalho/order</p> <p>Estrutura do projeto: </p><pre><code>order/\n\u251c\u2500\u2500 src/main/java/store/order/\n\u2502   \u251c\u2500\u2500 OrderController.java\n\u2502   \u251c\u2500\u2500 OrderIn.java\n\u2502   \u251c\u2500\u2500 OrderItemIn.java\n\u2502   \u251c\u2500\u2500 OrderItemOut.java\n\u2502   \u2514\u2500\u2500 OrderOut.java\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 .gitignore\n</code></pre><p></p>"},{"location":"exercicio2/main/#2-order-service-repository","title":"2. Order Service Repository","text":"<p>Link: https://github.com/RicardolCarvalho/order-service</p> <p>Estrutura do projeto: </p><pre><code>order-service/\n\u251c\u2500\u2500 src/main/\n\u2502   \u251c\u2500\u2500 FeignAuth.java\n\u2502   \u251c\u2500\u2500 Order.java\n\u2502   \u251c\u2500\u2500 OrderApplication.java\n\u2502   \u251c\u2500\u2500 OrderItem.java\n\u2502   \u251c\u2500\u2500 OrderItemModel.java\n\u2502   \u251c\u2500\u2500 OrderModel.java\n\u2502   \u251c\u2500\u2500 OrderParser.java\n\u2502   \u251c\u2500\u2500 OrderRepository.java\n\u2502   \u251c\u2500\u2500 OrderRequest.java\n\u2502   \u251c\u2500\u2500 OrderResource.java\n\u2502   \u2514\u2500\u2500 OrderService.java\n\u251c\u2500\u2500 DockerFile\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 .gitignore\n</code></pre><p></p>"},{"location":"exercicio2/main/#codigo-fonte-das-atividades","title":"C\u00f3digo Fonte das Atividades","text":""},{"location":"exercicio2/main/#principais-componentes-implementados","title":"Principais Componentes Implementados","text":""},{"location":"exercicio2/main/#1-ordercontrollerjava","title":"1. OrderController.java","text":"<p>Controlador REST respons\u00e1vel por expor os endpoints da API de pedidos:</p> <pre><code>@RestController\n@RequestMapping(\"/order\")\npublic class OrderController {\n\n    @Autowired\n    private OrderService orderService;\n\n    @PostMapping\n    public ResponseEntity&lt;OrderOut&gt; createOrder(@RequestBody OrderIn orderIn) {\n        OrderOut order = orderService.createOrder(orderIn);\n        return ResponseEntity.status(201).body(order);\n    }\n\n    @GetMapping\n    public ResponseEntity&lt;List&lt;OrderOut&gt;&gt; getAllOrders() {\n        List&lt;OrderOut&gt; orders = orderService.getOrdersByCurrentUser();\n        return ResponseEntity.ok(orders);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity&lt;OrderOut&gt; getOrderById(@PathVariable String id) {\n        OrderOut order = orderService.getOrderById(id);\n        return ResponseEntity.ok(order);\n    }\n}\n</code></pre>"},{"location":"exercicio2/main/#2-orderjava-entidade","title":"2. Order.java (Entidade)","text":"<p>Entidade JPA representando um pedido no banco de dados:</p> <pre><code>@Entity\n@Table(name = \"orders\")\npublic class Order {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @Column(nullable = false)\n    private String userId;\n\n    @Column(nullable = false)\n    private LocalDateTime date;\n\n    @OneToMany(mappedBy = \"order\", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\n    private List&lt;OrderItem&gt; items;\n\n    @Column(nullable = false)\n    private Double total;\n}\n</code></pre>"},{"location":"exercicio2/main/#3-orderservicejava","title":"3. OrderService.java","text":"<p>Camada de servi\u00e7o contendo a l\u00f3gica de neg\u00f3cio para pedidos:</p> <pre><code>@Service\npublic class OrderService {\n\n    @Autowired\n    private OrderRepository orderRepository;\n\n    @Autowired\n    private CurrentUser currentUser;\n\n    @Autowired\n    private FeignAuth feignAuth;\n\n    public OrderOut createOrder(OrderIn orderIn) {\n        validateProducts(orderIn.getItems());\n\n        Order order = new Order();\n        order.setUserId(currentUser.getId());\n        order.setDate(LocalDateTime.now());\n\n        List&lt;OrderItem&gt; items = processOrderItems(orderIn.getItems(), order);\n        order.setItems(items);\n\n        double total = items.stream()\n                .mapToDouble(OrderItem::getTotal)\n                .sum();\n        order.setTotal(total);\n\n        Order savedOrder = orderRepository.save(order);\n        return OrderParser.toOut(savedOrder);\n    }\n\n    public List&lt;OrderOut&gt; getOrdersByCurrentUser() {\n        List&lt;Order&gt; orders = orderRepository.findByUserId(currentUser.getId());\n        return orders.stream()\n                .map(OrderParser::toOut)\n                .collect(Collectors.toList());\n    }\n}\n</code></pre>"},{"location":"exercicio2/main/#4-feignauthjava-cliente-de-integracao","title":"4. FeignAuth.java (Cliente de Integra\u00e7\u00e3o)","text":"<pre><code>@FeignClient(name = \"auth-service\", url = \"${auth.service.url}\")\npublic interface FeignAuth {\n\n    @GetMapping(\"/product/{id}\")\n    ProductOut getProduct(@PathVariable String id, \n                         @RequestHeader(\"Authorization\") String token);\n\n    @PostMapping(\"/auth/validate\")\n    UserOut validateToken(@RequestHeader(\"Authorization\") String token);\n}\n</code></pre>"},{"location":"exercicio2/main/#order-api","title":"Order API","text":"<p>POST /order</p> <p>Create a new order for the current user.</p> RequestResponsePostman <pre><code>{\n    \"items\": [\n        {\n            \"idProduct\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n            \"quantity\": 2\n        },\n        {\n            \"idProduct\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n            \"quantity\": 1\n        }\n    ]\n}\n</code></pre> <p></p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"product\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\"\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"product\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\"\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 201 (created)\nResponse code: 400 (bad request), if the product does not exist.\n</code></pre><p></p> <p></p> <p>GET /order</p> <p>Get all orders for the current user.</p> ResponsePostman <p></p><pre><code>[\n    {\n        \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n        \"date\": \"2025-09-01T12:30:00\",\n        \"total\": 26.44\n    },\n    {\n        \"id\": \"0195ac33-cbbd-7a6e-a15b-b85402cf143f\",\n        \"date\": \"2025-10-09T03:21:57\",\n        \"total\": 18.6\n    }\n\n]\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre><p></p> <p></p> <p>GET /order/{id}</p> <p>Get the order details by its ID. The order must belong to the current user., otherwise, return a <code>404</code>.</p> ResponsePostman <p></p><pre><code>{\n    \"id\": \"0195ac33-73e5-7cb3-90ca-7b5e7e549569\",\n    \"date\": \"2025-09-01T12:30:00\",\n    \"items\": [\n        {\n            \"id\": \"01961b9a-bca2-78c4-9be1-7092b261f217\",\n            \"product\": {\n                \"id\": \"0195abfb-7074-73a9-9d26-b4b9fbaab0a8\",\n            },\n            \"quantity\": 2,\n            \"total\": 20.24\n        },\n        {\n            \"id\": \"01961b9b-08fd-76a5-8508-cdb6cd5c27ab\",\n            \"product\": {\n                \"id\": \"0195abfe-e416-7052-be3b-27cdaf12a984\",\n            },\n            \"quantity\": 10,\n            \"total\": 6.2\n        }\n    ],\n    \"total\": 26.44\n}\n</code></pre> <pre><code>Response code: 200 (ok)\nResponse code: 404 (not found), if the order does not belong to the current user.\n</code></pre><p></p> <p></p> <p>This MkDocs was created by Ricardo Luz Carvalho</p>"},{"location":"exercicio3/main/","title":"Exerc\u00edcio 3 - Exchange","text":""},{"location":"exercicio3/main/#exercicio-3-api-exchange","title":"Exerc\u00edcio 3 - API Exchange","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway e1@==&gt; exchange:::red\n        gateway --&gt; product\n        gateway --&gt; order\n        product --&gt; db\n        order --&gt; db\n        order --&gt; product\n    end\n    exchange e3@==&gt; 3partyapi:::green@{label: \"3rd-party API\"}\n    internet e2@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    classDef red fill:#fcc\n    classDef green fill:#cfc\n    click product \"#product-api\" \"Product API\"</code></pre>"},{"location":"exercicio3/main/#repositorios-utilizados","title":"Reposit\u00f3rios Utilizados","text":""},{"location":"exercicio3/main/#exchange-repository","title":"Exchange Repository","text":"<p>Link: https://github.com/RicardolCarvalho/exchange</p> <p>Estrutura do projeto: </p><pre><code>exchange/\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 .gitignore\n</code></pre><p></p>"},{"location":"exercicio3/main/#codigo-fonte-das-atividades","title":"C\u00f3digo Fonte das Atividades","text":""},{"location":"exercicio3/main/#principais-componentes-implementados","title":"Principais Componentes Implementados","text":""},{"location":"exercicio3/main/#1-mainpy-aplicacao-fastapi","title":"1. main.py (Aplica\u00e7\u00e3o FastAPI)","text":"<p>Aplica\u00e7\u00e3o principal implementada em Python com FastAPI:</p> <pre><code>from fastapi import FastAPI, HTTPException\nfrom datetime import datetime\nimport requests\nimport os\nfrom typing import Dict\n\napp = FastAPI(title=\"Exchange API\", version=\"1.0.0\")\n\nEXCHANGE_API_URL = \"https://api.exchangerate-api.com/v4/latest\"\nEXCHANGE_API_KEY = os.getenv(\"EXCHANGE_API_KEY\", \"your-api-key\")\n\n@app.get(\"/\")\ndef read_root():\n    return {\"message\": \"Exchange API is running\"}\n\n@app.get(\"/exchange/{from_currency}/{to_currency}\")\nasync def get_exchange_rate(from_currency: str, to_currency: str):\n    \"\"\"\n    Get exchange rate between two currencies\n    \"\"\"\n    try:\n        # Validar c\u00f3digos de moeda\n        if len(from_currency) != 3 or len(to_currency) != 3:\n            raise HTTPException(status_code=400, detail=\"Invalid currency code\")\n\n        # Buscar taxa de c\u00e2mbio na API externa\n        response = requests.get(f\"{EXCHANGE_API_URL}/{from_currency.upper()}\")\n\n        if response.status_code != 200:\n            raise HTTPException(status_code=502, detail=\"External API unavailable\")\n\n        data = response.json()\n        rates = data.get(\"rates\", {})\n\n        if to_currency.upper() not in rates:\n            raise HTTPException(status_code=404, detail=\"Currency not found\")\n\n        # Calcular taxas de compra e venda (spread de 2%)\n        base_rate = rates[to_currency.upper()]\n        sell_rate = round(base_rate * 1.01, 4)  # Taxa de venda (1% acima)\n        buy_rate = round(base_rate * 0.99, 4)   # Taxa de compra (1% abaixo)\n\n        return {\n            \"sell\": sell_rate,\n            \"buy\": buy_rate,\n            \"date\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n            \"id-account\": \"0195ae95-5be7-7dd3-b35d-7a7d87c404fb\"\n        }\n\n    except requests.RequestException:\n        raise HTTPException(status_code=502, detail=\"Failed to fetch exchange rates\")\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Internal server error: {str(e)}\")\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre> <p>GET /exchange/{from}/{to}</p> <p>Get the current of a coin from one currency to another. E.g. <code>GET /coin/USD/EUR</code>.</p> ResponsePostman BRLPostman EUR <p></p><pre><code>{\n    \"sell\": 0.82,\n    \"buy\": 0.80,\n    \"date\": \"2021-09-01 14:23:42\",\n    \"id-account\": \"0195ae95-5be7-7dd3-b35d-7a7d87c404fb\"\n}\n</code></pre> <pre><code>Response code: 200 (ok)\n</code></pre><p></p> <p></p> <p></p> <p>This MkDocs was created by Ricardo Luz Carvalho</p>"},{"location":"exercicio4/main/","title":"Exerc\u00edcio 4 - Jenkins","text":""},{"location":"exercicio4/main/#exercicio-4-jenkins","title":"Exerc\u00edcio 4 - Jenkins","text":""},{"location":"exercicio4/main/#repositorios","title":"Reposit\u00f3rios","text":"<ol> <li>Account Service - Servi\u00e7o de contas de usu\u00e1rio</li> <li>Auth Service - Servi\u00e7o de autentica\u00e7\u00e3o</li> <li>Gateway Service - API Gateway</li> <li>Product Service - Servi\u00e7o de produtos</li> <li>Order Service - Servi\u00e7o de pedidos</li> </ol> <p>Estrutura do projeto: </p><pre><code>api/\n\u251c\u2500\u2500 account-service/\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 src/...\n\u251c\u2500\u2500 auth-service/\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 src/...\n\u251c\u2500\u2500 gateway-service/\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 src/...\n\u251c\u2500\u2500 product-service/\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2514\u2500\u2500 src/...\n\u2514\u2500\u2500 order-service/\n    \u251c\u2500\u2500 Jenkinsfile\n    \u251c\u2500\u2500 Dockerfile\n    \u2514\u2500\u2500 src/...\n</code></pre><p></p>"},{"location":"exercicio4/main/#codigos","title":"C\u00f3digos","text":""},{"location":"exercicio4/main/#jenkins-setup","title":"Jenkins Setup","text":"<p>The Jenkins environment is configured using Docker Compose:</p> <pre><code># docker compose up -d --build --force-recreate\nname: ops\n\nservices:\n\n  jenkins:\n    container_name: jenkins\n    build:\n      dockerfile_inline: |\n        FROM jenkins/jenkins:jdk21\n        USER root\n\n        # Install tools\n        RUN apt-get update &amp;&amp; apt-get install -y lsb-release iputils-ping maven\n\n        # Install Docker\n        RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \\\n          https://download.docker.com/linux/debian/gpg\n        RUN echo \"deb [arch=$(dpkg --print-architecture) \\\n          signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \\\n          https://download.docker.com/linux/debian \\\n          $(lsb_release -cs) stable\" &gt; /etc/apt/sources.list.d/docker.list\n        RUN apt-get update &amp;&amp; apt-get install -y docker-ce\n\n        # Install kubectl\n        RUN apt-get install -y apt-transport-https ca-certificates curl\n        RUN curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n        RUN chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n        RUN echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list\n        RUN chmod 644 /etc/apt/sources.list.d/kubernetes.list\n        RUN apt-get update &amp;&amp; apt-get install -y kubectl\n\n        RUN usermod -aG docker jenkins\n    ports:\n      - 9080:8080\n    volumes:\n      - ${CONFIG:-./config}/jenkins:/var/jenkins_home\n      - /var/run/docker.sock:/var/run/docker.sock\n    restart: always\n</code></pre>"},{"location":"exercicio4/main/#api-pipeline","title":"API Pipeline","text":"<p>Example of a Jenkinsfile for the <code>product-service</code>:</p> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'product'\n        NAME = \"ricardolcarvalho/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'product', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"exercicio4/main/#contract-pipeline","title":"Contract Pipeline","text":"<p>Example of a Jenkinsfile for the <code>contract</code>:</p> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n\n}\n</code></pre> <p>This MkDocs was created by Ricardo Luz Carvalho</p>"},{"location":"exercicio5/main/","title":"Exerc\u00edcio 5 - MiniKube","text":""},{"location":"exercicio5/main/#exercicio-5-minikube","title":"Exerc\u00edcio 5 - MiniKube","text":""},{"location":"exercicio5/main/#repositorios-utilizados","title":"Reposit\u00f3rios Utilizados","text":"<ol> <li>Account Service - Servi\u00e7o de contas de usu\u00e1rio</li> <li>Auth Service - Servi\u00e7o de autentica\u00e7\u00e3o</li> <li>Gateway Service - API Gateway</li> <li>Product Service - Servi\u00e7o de produtos</li> <li>Order Service - Servi\u00e7o de pedidos</li> <li>Postgres Service - Banco de Dados (gitignore)</li> </ol> <p>Estrutura do projeto: </p><pre><code>api/\n\u251c\u2500\u2500 account-service/\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 k8s/\n\u2502   \u2502   \u2514\u2500\u2500 k8s.yaml\n\u2502   \u2514\u2500\u2500 src/...\n\u251c\u2500\u2500 auth-service/\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 k8s/\n\u2502   \u2502   \u2514\u2500\u2500 k8s.yaml\n\u2502   \u2514\u2500\u2500 src/...\n\u251c\u2500\u2500 gateway-service/\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 k8s/\n\u2502   \u2502   \u2514\u2500\u2500 k8s.yaml\n\u2502   \u2514\u2500\u2500 src/...\n\u251c\u2500\u2500 product-service/\n\u2502   \u251c\u2500\u2500 Jenkinsfile\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 k8s/\n\u2502   \u2502   \u2514\u2500\u2500 k8s.yaml\n\u2502   \u2514\u2500\u2500 src/...\n\u2514\u2500\u2500 order-service/\n    \u251c\u2500\u2500 Jenkinsfile\n    \u251c\u2500\u2500 Dockerfile\n    \u251c\u2500\u2500 k8s/\n    \u2502   \u2514\u2500\u2500 k8s.yaml\n    \u2514\u2500\u2500 src/...\n</code></pre><p></p>"},{"location":"exercicio5/main/#codigos","title":"C\u00f3digos","text":""},{"location":"exercicio5/main/#kubernetes-configurations","title":"Kubernetes Configurations","text":"Account ServiceAuth ServiceGateway ServiceProduct ServiceOrder Service <pre><code># k8s/k8s.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: account\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: account\n  template:\n    metadata:\n      labels:\n        app: account\n    spec:\n      containers:\n        - name: account\n          image: ricardolcarvalho/account:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n            - name: DATABASE_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n            - name: DATABASE_URL\n              value: \"jdbc:postgresql://postgres:5432/$(POSTGRES_DB)\"\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: account\n  labels:\n    app: account\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n  selector:\n    app: account\n</code></pre> <pre><code># k8s/k8s.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: auth\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: auth\n  template:\n    metadata:\n      labels:\n        app: auth\n    spec:\n      containers:\n        - name: auth\n          image: ricardolcarvalho/auth:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n            - name: DATABASE_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n            - name: DATABASE_URL\n              value: \"jdbc:postgresql://postgres:5432/$(POSTGRES_DB)\"\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: auth\n  labels:\n    app: auth\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n  selector:\n    app: auth\n</code></pre> <pre><code># k8s/k8s.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: gateway\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: gateway\n  template:\n    metadata:\n      labels:\n        app: gateway\n    spec:\n      containers:\n        - name: gateway\n          image: ricardolcarvalho/gateway:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: gateway\n  labels:\n    app: gateway\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n  selector:\n    app: gateway\n</code></pre> <pre><code># k8s/k8s.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: product\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: product\n  template:\n    metadata:\n      labels:\n        app: product\n    spec:\n      containers:\n        - name: product\n          image: ricardolcarvalho/product:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n            - name: DATABASE_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n            - name: DATABASE_URL\n              value: \"jdbc:postgresql://postgres:5432/$(POSTGRES_DB)\"\n            - name: SPRING_CACHE_TYPE\n              value: redis\n            - name: SPRING_DATA_REDIS_HOST\n              value: redis\n            - name: SPRING_DATA_REDIS_PORT\n              value: \"6379\"\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: product\n  labels:\n    app: product\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n  selector:\n    app: product\n</code></pre> <pre><code># k8s/k8s.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: order\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: order\n  template:\n    metadata:\n      labels:\n        app: order\n    spec:\n      containers:\n        - name: order\n          image: ricardolcarvalho/order:latest\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n          env:\n            - name: POSTGRES_DB\n              valueFrom:\n                configMapKeyRef:\n                  name: postgres-configmap\n                  key: POSTGRES_DB\n            - name: DATABASE_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_USER\n            - name: DATABASE_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secrets\n                  key: POSTGRES_PASSWORD\n            - name: DATABASE_URL\n              value: \"jdbc:postgresql://postgres:5432/$(POSTGRES_DB)\"\n          resources:\n            requests:\n              memory: \"200Mi\"\n              cpu: \"50m\"\n            limits:\n              memory: \"300Mi\"\n              cpu: \"200m\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: order\n  labels:\n    app: order\nspec:\n  type: ClusterIP\n  ports:\n    - port: 80\n      protocol: TCP\n      targetPort: 8080\n  selector:\n    app: order\n</code></pre> <p>This MkDocs was created by Ricardo Luz Carvalho</p>"},{"location":"projeto/main/","title":"Projeto","text":"<p>Aqui vai toda a documenta\u00e7\u00e3o do projeto, incluindo o que j\u00e1 foi feito e o que falta fazer.</p>"},{"location":"thisdocumentation/main/","title":"This documentation","text":""},{"location":"thisdocumentation/main/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Antes de come\u00e7ar, certifique-se de que voc\u00ea possui os seguintes pr\u00e9-requisitos instalados em seu sistema:</p> <ul> <li>Git: Para clonar o reposit\u00f3rio.</li> </ul>"},{"location":"thisdocumentation/main/#instalando-o-python","title":"Instalando o Python","text":"LinuxmacOSWindows <p>Instale o Python 3.8 ou superior.</p> <pre><code>sudo apt install python3 python3-venv python3-pip\npython3 --version\n</code></pre> <p>Instale o Python 3.8 ou superior.</p> <pre><code>brew install python\npython3 --version\n</code></pre> <p>Instale o Python 3.13 ou superior. Baixe o instalador do site oficial do Python (https://www.python.org/downloads/) e execute-o. Certifique-se de marcar a op\u00e7\u00e3o \"Add Python to PATH\" durante a instala\u00e7\u00e3o.</p> <pre><code>python --version\n</code></pre>"},{"location":"thisdocumentation/main/#usage","title":"Usage","text":"<p>Para utilizar o c\u00f3digo deste reposit\u00f3rio, siga as instru\u00e7\u00f5es a seguir:</p> <p>Clone ou fork este reposit\u00f3rio:</p> <pre><code>git clone &lt;URL_DO_REPOSITORIO&gt;\n</code></pre> <p>Crie um ambiente virtual do Python:</p> Linux/macOSWindows <pre><code>python3 -m venv env\n</code></pre> <pre><code>python -m venv env\n</code></pre> <p>Ative o ambiente virtual (voc\u00ea deve fazer isso sempre que for executar algum script deste reposit\u00f3rio):</p> Linux/macOSWindows <pre><code>source ./env/bin/activate\n</code></pre> <pre><code>.\\env\\Scripts\\activate\n</code></pre> <p>Instale as depend\u00eancias com:</p> Linux/macOSWindows <pre><code>python3 -m pip install -r requirements.txt --upgrade\n</code></pre> <pre><code>python -m pip install -r requirements.txt --upgrade\n</code></pre>"},{"location":"thisdocumentation/main/#deployment","title":"Deployment","text":"<p>O material utiliza o mkdocs para gerar a documenta\u00e7\u00e3o. Para visualizar a documenta\u00e7\u00e3o, execute o comando:</p> <pre><code>mkdocs serve -o\n</code></pre> <p>Para subir ao GitHub Pages, execute o comando:</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p>Esse reposit\u00f3rio possui um workflow do GitHub Actions que executa o comando <code>mkdocs gh-deploy</code> sempre que houver um push na branch <code>main</code>. Assim, n\u00e3o \u00e9 necess\u00e1rio executar esse comando manualmente. Toda vez que voc\u00ea fizer um push na branch <code>main</code>, a documenta\u00e7\u00e3o ser\u00e1 atualizada automaticamente no GitHub Pages.</p> <p>Aviso 1</p> <p>Para que o github actions funcione corretamente, \u00e9 necess\u00e1rio que o reposit\u00f3rio esteja configurado para que o bot <code>github-actions[bot]</code> tenha permiss\u00e3o de escrita. Voc\u00ea pode verificar isso nas configura\u00e7\u00f5es do reposit\u00f3rio, na se\u00e7\u00e3o \"Actions\" e depois em \"General\". Certifique-se de que a op\u00e7\u00e3o \"Workflow permissions\" esteja definida como \"Read and write permissions\".</p> <p></p> <p>Aviso 2</p> <p>Depois de publicar, caso n\u00e3o consiga acessar a p\u00e1gina, verifique se o github pages est\u00e1 configurado corretamente. V\u00e1 at\u00e9 as configura\u00e7\u00f5es do reposit\u00f3rio, na se\u00e7\u00e3o \"Pages\" e verifique se a branch <code>gh-pages</code> est\u00e1 selecionada como fonte. Se n\u00e3o estiver, selecione-a e salve as altera\u00e7\u00f5es.</p> <p></p> <p>Pay Attention</p> <p>No arquivo '<code>mkdocs.yml</code>, a se\u00e7\u00e3o <code>site_url</code> deve estar configurada corretamente para o seu reposit\u00f3rio. Por exemplo, se o seu reposit\u00f3rio estiver em <code>https://github.com/usuario/repositorio</code>, a se\u00e7\u00e3o <code>site_url</code> deve ser:</p> <pre><code>site_url: https://usuario.github.io/repositorio\n</code></pre> <p>Tamb\u00e9m, certifique-se de que a se\u00e7\u00e3o <code>repo_url</code> esteja configurada corretamente para o seu reposit\u00f3rio. Por exemplo:</p> <pre><code>repo_url: https://github.com/usuario/repositorio\n</code></pre>"}]}